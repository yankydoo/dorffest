{"version":3,"sources":["MenuTable.tsx","data/menu.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["priceFormat","Intl","NumberFormat","style","currency","MenuTable","props","useState","menuItems","map","itemCount","setItemCount","copyAddItemCount","idx","amount","copy","Math","max","Table","size","TableHead","TableRow","TableCell","align","TableBody","menuItem","name","Typography","variant","color","format","price","noWrap","IconButton","onClick","RemoveCircleOutline","AddCircleOutline","TableFooter","count","reduce","previousValue","currentValue","Button","menu","App","Paper","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ed51eb9.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {MenuItem} from \"./entity/MenuItem\";\nimport {\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableRow,\n  Typography\n} from \"@material-ui/core\";\nimport {useState} from \"react\";\nimport {AddCircleOutline, RemoveCircleOutline} from \"@material-ui/icons\";\n\ninterface IMenuTableProps {\n    menuItems: MenuItem[]\n}\n\nconst priceFormat = new Intl.NumberFormat('de-AT', { style: 'currency', currency: 'EUR' });\n\nexport const MenuTable: React.FC<IMenuTableProps> = (props: IMenuTableProps) => {\n\n  const [itemCount, setItemCount] = useState(props.menuItems.map(() => 0) as number[]);\n\n  const copyAddItemCount = (itemCount: number[], idx: number, amount: number) => {\n    const copy = [...itemCount];\n    copy[idx] = Math.max(itemCount[idx] + amount, 0);\n    return copy;\n  };\n\n  return (\n    <Table size={\"small\"}>\n      <TableHead>\n        <TableRow>\n          <TableCell>Speise</TableCell>\n          <TableCell>Preis</TableCell>\n          <TableCell align={\"center\"}>Anzahl</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {props.menuItems.map((menuItem, idx) => (\n          <TableRow key={idx}>\n            <TableCell>{menuItem.name}</TableCell>\n            <TableCell>\n              <Typography variant={\"caption\"} color={\"textSecondary\"}>\n                {priceFormat.format(menuItem.price)}\n              </Typography>\n              <br />\n              {priceFormat.format(menuItem.price * itemCount[idx])}\n            </TableCell>\n            <TableCell align={\"center\"}>\n              <Typography variant={\"h6\"} color={\"textPrimary\"} noWrap={true}>\n                <IconButton onClick={() => setItemCount(copyAddItemCount(itemCount, idx, -1))} color={\"primary\"}>\n                  <RemoveCircleOutline />\n                </IconButton>\n                  {itemCount[idx]}\n                <IconButton onClick={() => setItemCount(copyAddItemCount(itemCount, idx, 1))} color={\"primary\"}>\n                  <AddCircleOutline />\n                </IconButton>\n              </Typography>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell>\n            Summe\n          </TableCell>\n          <TableCell>\n            <Typography variant={\"h6\"} color={\"textPrimary\"}>\n              {priceFormat.format(itemCount.map((count, idx) => props.menuItems[idx].price * count).reduce((previousValue, currentValue) => previousValue + currentValue, 0))}\n            </Typography>\n          </TableCell>\n          <TableCell align={\"center\"}>\n            <Button variant={\"outlined\"} onClick={() => setItemCount(props.menuItems.map(() => 0))} color={\"primary\"}>\n              Reset\n            </Button>\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  )\n};\n","import {MenuItem} from \"../entity/MenuItem\";\n\nexport const menu: MenuItem[] = [\n    {\n        name: \"Bier, Radler\",\n        price: 3\n    },\n    {\n        name: \"1/8 rot/weiÃŸ\",\n        price: 2\n    },\n    {\n        name: \"G'spritzter, Kaiser\",\n        price: 2.5\n    },\n    {\n        name: \"1/8 Veltliner Tradition\",\n        price: 2.5\n    },\n    {\n        name: \"Cola, Fanta, Almd. 0,33 l\",\n        price: 2\n    },\n    {\n        name: \"Korl, Schurli\",\n        price: 2.5\n    },\n    {\n        name: \"Mineral 0,33 l\",\n        price: 1.5\n    },\n    {\n        name: \"Kaffee\",\n        price: 1.5\n    },\n    {\n        name: \"Mehlspeise\",\n        price: 2\n    },\n    {\n        name: \"Pommes\",\n        price: 2.5\n    },\n    {\n        name: \"Kotelettsemmel\",\n        price: 4\n    },\n    {\n        name: \"Kotelett + Pommes/Semmel + Salat\",\n        price: 9\n    },\n    {\n        name: \"Kotelett Kinderportion\",\n        price: 6\n    },\n];","import React from 'react';\nimport './App.css';\nimport {MenuTable} from \"./MenuTable\";\nimport {menu} from \"./data/menu\";\nimport {Paper} from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n  return (\n    <Paper className=\"App\">\n      <MenuTable menuItems={menu} />\n    </Paper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}