{"version":3,"sources":["MenuTable.tsx","data/menu.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["priceFormat","Intl","NumberFormat","style","currency","MenuTable","props","useState","menuItems","map","itemCount","setItemCount","copyAddItemCount","idx","amount","copy","Math","max","Table","size","TableHead","TableRow","TableCell","TableBody","menuItem","key","name","format","price","IconButton","onClick","Remove","Add","TableFooter","colSpan","count","reduce","previousValue","currentValue","menu","App","Paper","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAUMA,EAAc,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAErEC,EAAuC,SAACC,GAA4B,IAAD,EAE5CC,mBAASD,EAAME,UAAUC,IAAI,kBAAM,KAFS,mBAEvEC,EAFuE,KAE5DC,EAF4D,KAIxEC,EAAmB,SAACF,EAAqBG,EAAaC,GAC1D,IAAMC,EAAI,YAAOL,GAEjB,OADAK,EAAKF,GAAOG,KAAKC,IAAIP,EAAUG,GAAOC,EAAQ,GACvCC,GAGT,OACE,gBAACG,EAAA,EAAD,CAAOC,KAAM,SACX,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,eACA,gBAACA,EAAA,EAAD,cACA,gBAACA,EAAA,EAAD,iBAGJ,gBAACC,EAAA,EAAD,KACGjB,EAAME,UAAUC,IAAI,SAACe,EAAUX,GAAX,OACnB,gBAACQ,EAAA,EAAD,CAAUI,IAAKZ,GACb,gBAACS,EAAA,EAAD,KAAYE,EAASE,MACrB,gBAACJ,EAAA,EAAD,KAAYtB,EAAY2B,OAAOH,EAASI,QACxC,gBAACN,EAAA,EAAD,KACE,gBAACO,EAAA,EAAD,CAAYC,QAAS,kBAAMnB,EAAaC,EAAiBF,EAAWG,GAAM,MACxE,gBAACkB,EAAA,EAAD,OAEDrB,EAAUG,GACX,gBAACgB,EAAA,EAAD,CAAYC,QAAS,kBAAMnB,EAAaC,EAAiBF,EAAWG,EAAK,MACvE,gBAACmB,EAAA,EAAD,YAMV,gBAACC,EAAA,EAAD,KACE,gBAACZ,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,cAGA,gBAACA,EAAA,EAAD,CAAWY,QAAS,GACjBlC,EAAY2B,OAAOjB,EAAUD,IAAI,SAAC0B,EAAOtB,GAAR,OAAgBP,EAAME,UAAUK,GAAKe,MAAQO,IAAOC,OAAO,SAACC,EAAeC,GAAhB,OAAiCD,EAAgBC,GAAc,SCpD3JC,EAAmB,CAC5B,CACIb,KAAM,eACNE,MAAO,GAEX,CACIF,KAAM,kBACNE,MAAO,KAEX,CACIF,KAAM,sBACNE,MAAO,GAEX,CACIF,KAAM,0BACNE,MAAO,KAEX,CACIF,KAAM,gBACNE,MAAO,GAEX,CACIF,KAAM,uBACNE,MAAO,KAEX,CACIF,KAAM,cACNE,MAAO,GAEX,CACIF,KAAM,SACNE,MAAO,KAEX,CACIF,KAAM,aACNE,MAAO,GAEX,CACIF,KAAM,SACNE,MAAO,GAEX,CACIF,KAAM,sBACNE,MAAO,GAEX,CACIF,KAAM,cACNE,MAAO,M,QCnCAY,EARO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAOC,UAAU,OACf,kBAAC,EAAD,CAAWlC,UAAW+B,MCGRI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.60bbab4c.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {MenuItem} from \"./entity/MenuItem\";\r\nimport {IconButton, Table, TableBody, TableCell, TableFooter, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport {Add, Remove} from \"@material-ui/icons\";\r\n\r\ninterface IMenuTableProps {\r\n    menuItems: MenuItem[]\r\n}\r\n\r\nconst priceFormat = new Intl.NumberFormat('de-AT', { style: 'currency', currency: 'EUR' });\r\n\r\nexport const MenuTable: React.FC<IMenuTableProps> = (props: IMenuTableProps) => {\r\n\r\n  const [itemCount, setItemCount] = useState(props.menuItems.map(() => 0) as number[]);\r\n\r\n  const copyAddItemCount = (itemCount: number[], idx: number, amount: number) => {\r\n    const copy = [...itemCount];\r\n    copy[idx] = Math.max(itemCount[idx] + amount, 0);\r\n    return copy;\r\n  };\r\n\r\n  return (\r\n    <Table size={\"small\"}>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Speise</TableCell>\r\n          <TableCell>Preis</TableCell>\r\n          <TableCell>Anzahl</TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {props.menuItems.map((menuItem, idx) => (\r\n          <TableRow key={idx}>\r\n            <TableCell>{menuItem.name}</TableCell>\r\n            <TableCell>{priceFormat.format(menuItem.price)}</TableCell>\r\n            <TableCell>\r\n              <IconButton onClick={() => setItemCount(copyAddItemCount(itemCount, idx, -1))}>\r\n                <Remove />\r\n              </IconButton>\r\n              {itemCount[idx]}\r\n              <IconButton onClick={() => setItemCount(copyAddItemCount(itemCount, idx, 1))}>\r\n                <Add />\r\n              </IconButton>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n      <TableFooter>\r\n        <TableRow>\r\n          <TableCell>\r\n            Summe\r\n          </TableCell>\r\n          <TableCell colSpan={2}>\r\n            {priceFormat.format(itemCount.map((count, idx) => props.menuItems[idx].price * count).reduce((previousValue, currentValue) => previousValue + currentValue, 0))}\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableFooter>\r\n    </Table>\r\n  )\r\n};\r\n","import {MenuItem} from \"../entity/MenuItem\";\r\n\r\nexport const menu: MenuItem[] = [\r\n    {\r\n        name: \"Bier, Radler\",\r\n        price: 3\r\n    },\r\n    {\r\n        name: \"1/8 rot/weiß\",\r\n        price: 1.5\r\n    },\r\n    {\r\n        name: \"G'spritzter, Kaiser\",\r\n        price: 2\r\n    },\r\n    {\r\n        name: \"1/8 Veltliner Tradition\",\r\n        price: 2.5\r\n    },\r\n    {\r\n        name: \"Korl, Schurli\",\r\n        price: 2\r\n    },\r\n    {\r\n        name: \"Cola, Fanta, Alm 1/4\",\r\n        price: 1.5\r\n    },\r\n    {\r\n        name: \"Mineral 1/4\",\r\n        price: 1\r\n    },\r\n    {\r\n        name: \"Kaffee\",\r\n        price: 1.5\r\n    },\r\n    {\r\n        name: \"Mehlspeise\",\r\n        price: 2\r\n    },\r\n    {\r\n        name: \"Pommes\",\r\n        price: 2\r\n    },\r\n    {\r\n        name: \"1 Spieß (Kinder)\",\r\n        price: 6\r\n    },\r\n    {\r\n        name: \"2 Spieße\",\r\n        price: 8.5\r\n    },\r\n];","import React from 'react';\nimport './App.css';\nimport {MenuTable} from \"./MenuTable\";\nimport {menu} from \"./data/menu\";\nimport {Paper} from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n  return (\n    <Paper className=\"App\">\n      <MenuTable menuItems={menu} />\n    </Paper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}